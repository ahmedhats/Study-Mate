{"version":3,"file":"static/js/510.661abde7.chunk.js","mappings":"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","sources":["pages/Timer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  Button,\n  Progress,\n  Space,\n  Radio,\n  InputNumber,\n  Typography,\n} from \"antd\";\nimport {\n  PlayCircleOutlined,\n  PauseOutlined,\n  RedoOutlined,\n} from \"@ant-design/icons\";\nimport \"./Timer.css\";\n\nconst { Title, Text } = Typography;\n\nconst Timer = () => {\n  const [mode, setMode] = useState(\"pomodoro\");\n  const [time, setTime] = useState(25 * 60); // 25 minutes for Pomodoro\n  const [isActive, setIsActive] = useState(false);\n  const [customTime, setCustomTime] = useState(25);\n\n  // Pomodoro settings\n  const [workTime, setWorkTime] = useState(25);\n  const [breakTime, setBreakTime] = useState(5);\n  const [isBreak, setIsBreak] = useState(false);\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive && time > 0) {\n      interval = setInterval(() => {\n        setTime((time) => {\n          if (time <= 1) {\n            if (mode === \"pomodoro\") {\n              // Switch between work and break\n              setIsBreak(!isBreak);\n              return isBreak ? workTime * 60 : breakTime * 60;\n            }\n            setIsActive(false);\n            return 0;\n          }\n          return time - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, time, mode, isBreak, workTime, breakTime]);\n\n  const toggleTimer = () => {\n    setIsActive(!isActive);\n  };\n\n  const resetTimer = () => {\n    setIsActive(false);\n    if (mode === \"pomodoro\") {\n      setTime(workTime * 60);\n      setIsBreak(false);\n    } else {\n      setTime(customTime * 60);\n    }\n  };\n\n  const handleModeChange = (e) => {\n    setMode(e.target.value);\n    setIsActive(false);\n    if (e.target.value === \"pomodoro\") {\n      setTime(workTime * 60);\n      setIsBreak(false);\n    } else {\n      setTime(customTime * 60);\n    }\n  };\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, \"0\")}:${secs\n      .toString()\n      .padStart(2, \"0\")}`;\n  };\n\n  return (\n    <div className=\"timer-container\">\n      <Card className=\"timer-card\">\n        <Title level={2}>\n          {mode === \"pomodoro\" ? \"Pomodoro Timer\" : \"Custom Timer\"}\n        </Title>\n\n        <Radio.Group\n          value={mode}\n          onChange={handleModeChange}\n          className=\"timer-mode\"\n        >\n          <Radio.Button value=\"pomodoro\">Pomodoro</Radio.Button>\n          <Radio.Button value=\"custom\">Custom Timer</Radio.Button>\n        </Radio.Group>\n\n        {mode === \"pomodoro\" && (\n          <div className=\"timer-settings\">\n            <Space>\n              <div>\n                <Text>Work Time (min)</Text>\n                <InputNumber\n                  min={1}\n                  max={60}\n                  value={workTime}\n                  onChange={(value) => setWorkTime(value)}\n                />\n              </div>\n              <div>\n                <Text>Break Time (min)</Text>\n                <InputNumber\n                  min={1}\n                  max={30}\n                  value={breakTime}\n                  onChange={(value) => setBreakTime(value)}\n                />\n              </div>\n            </Space>\n          </div>\n        )}\n\n        {mode === \"custom\" && (\n          <div className=\"timer-settings\">\n            <Text>Timer Duration (min)</Text>\n            <InputNumber\n              min={1}\n              max={120}\n              value={customTime}\n              onChange={(value) => {\n                setCustomTime(value);\n                setTime(value * 60);\n              }}\n            />\n          </div>\n        )}\n\n        <div className=\"timer-display\">\n          <Progress\n            type=\"circle\"\n            percent={\n              mode === \"pomodoro\"\n                ? (((isBreak ? breakTime * 60 : workTime * 60) - time) /\n                    (isBreak ? breakTime * 60 : workTime * 60)) *\n                  100\n                : ((customTime * 60 - time) / (customTime * 60)) * 100\n            }\n            format={() => (\n              <div className=\"timer-text\">\n                <Text>{formatTime(time)}</Text>\n                <Text type=\"secondary\">\n                  {isBreak ? \"Break Time\" : \"Work Time\"}\n                </Text>\n              </div>\n            )}\n            size={200}\n          />\n        </div>\n\n        <Space className=\"timer-controls\">\n          <Button\n            type=\"primary\"\n            size=\"large\"\n            icon={isActive ? <PauseOutlined /> : <PlayCircleOutlined />}\n            onClick={toggleTimer}\n          >\n            {isActive ? \"Pause\" : \"Start\"}\n          </Button>\n          <Button size=\"large\" icon={<RedoOutlined />} onClick={resetTimer}>\n            Reset\n          </Button>\n        </Space>\n      </Card>\n    </div>\n  );\n};\n\nexport default Timer;\n"],"names":["Title","Text","Typography","Timer","mode","setMode","useState","time","setTime","isActive","setIsActive","customTime","setCustomTime","workTime","setWorkTime","breakTime","setBreakTime","isBreak","setIsBreak","useEffect","interval","setInterval","clearInterval","formatTime","seconds","secs","Math","floor","toString","padStart","_jsx","className","children","_jsxs","Card","level","Radio","value","onChange","e","target","Space","InputNumber","min","max","Progress","type","percent","format","size","Button","icon","PauseOutlined","PlayCircleOutlined","onClick","toggleTimer","RedoOutlined","resetTimer"],"sourceRoot":""}