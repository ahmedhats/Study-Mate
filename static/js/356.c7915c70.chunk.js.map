{"version":3,"file":"static/js/356.c7915c70.chunk.js","mappings":"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","sources":["components/features/tasks/TaskModal.jsx","components/features/tasks/TaskHeader.jsx","components/features/tasks/utils.js","components/features/tasks/TaskList.jsx","pages/Tasks.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Modal, Form, Input, Select, DatePicker, Space } from \"antd\";\r\nimport dayjs from \"dayjs\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst TaskModal = ({ visible, onCancel, onSubmit }) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const handleCancel = () => {\r\n    form.resetFields();\r\n    onCancel();\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      onSubmit(values);\r\n    } catch (error) {\r\n      console.error(\"Validation failed:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Add New Task\"\r\n      open={visible}\r\n      onCancel={handleCancel}\r\n      onOk={handleSubmit}\r\n      destroyOnClose\r\n    >\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={{\r\n          priority: \"medium\",\r\n          dueDate: dayjs(),\r\n        }}\r\n      >\r\n        <Form.Item\r\n          name=\"title\"\r\n          label=\"Title\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please enter a task title\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Enter task title\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"description\" label=\"Description\">\r\n          <TextArea\r\n            rows={4}\r\n            placeholder=\"Enter task description\"\r\n            autoSize={{ minRows: 2, maxRows: 6 }}\r\n          />\r\n        </Form.Item>\r\n\r\n        <Space>\r\n          <Form.Item\r\n            name=\"priority\"\r\n            label=\"Priority\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please select a priority\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select style={{ width: 120 }}>\r\n              <Option value=\"high\">High</Option>\r\n              <Option value=\"medium\">Medium</Option>\r\n              <Option value=\"low\">Low</Option>\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"dueDate\"\r\n            label=\"Due Date\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please select a due date\",\r\n              },\r\n            ]}\r\n          >\r\n            <DatePicker style={{ width: 200 }} />\r\n          </Form.Item>\r\n        </Space>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n","import React from \"react\";\r\nimport { Typography, Button } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst TaskHeader = ({ onAddTask }) => {\r\n  return (\r\n    <>\r\n      <div style={{ marginBottom: 24 }}>\r\n        <Title level={2} style={{ margin: 0 }}>\r\n          My Tasks\r\n        </Title>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <span>Tasks</span>\r\n        <Button type=\"primary\" icon={<PlusOutlined />} onClick={onAddTask}>\r\n          Add Task\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskHeader;\r\n","export const getPriorityColor = (priority) => {\r\n    const colors = {\r\n        high: \"red\",\r\n        medium: \"orange\",\r\n        low: \"green\",\r\n    };\r\n    return colors[priority] || \"blue\";\r\n}; ","import React from \"react\";\r\nimport { List, Checkbox, Tag } from \"antd\";\r\nimport { getPriorityColor } from \"./utils\";\r\n\r\nconst TaskList = ({ tasks, onToggleCompletion }) => {\r\n  return (\r\n    <List\r\n      dataSource={tasks}\r\n      renderItem={(task) => (\r\n        <List.Item\r\n          actions={[\r\n            <Tag color={getPriorityColor(task.priority)}>{task.priority}</Tag>,\r\n            <Tag>{task.dueDate}</Tag>,\r\n          ]}\r\n        >\r\n          <List.Item.Meta\r\n            avatar={\r\n              <Checkbox\r\n                checked={task.completed}\r\n                onChange={() => onToggleCompletion(task.id)}\r\n              />\r\n            }\r\n            title={\r\n              <span\r\n                style={{\r\n                  textDecoration: task.completed ? \"line-through\" : \"none\",\r\n                }}\r\n              >\r\n                {task.title}\r\n              </span>\r\n            }\r\n            description={task.description}\r\n          />\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { useState } from \"react\";\nimport { Card, message } from \"antd\";\nimport TaskModal from \"../components/features/tasks/TaskModal\";\nimport TaskHeader from \"../components/features/tasks/TaskHeader\";\nimport TaskList from \"../components/features/tasks/TaskList\";\n\nconst TasksPage = () => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const handleAddTask = (values) => {\n    setTasks([...tasks, { ...values, id: Date.now(), completed: false }]);\n    setIsModalVisible(false);\n    message.success(\"Task added successfully\");\n  };\n\n  const toggleTaskCompletion = (taskId) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === taskId ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  return (\n    <>\n      <TaskHeader onAddTask={() => setIsModalVisible(true)} />\n      <Card style={{ margin: \"24px\" }}>\n        <TaskList tasks={tasks} onToggleCompletion={toggleTaskCompletion} />\n      </Card>\n\n      <TaskModal\n        visible={isModalVisible}\n        onCancel={() => setIsModalVisible(false)}\n        onSubmit={handleAddTask}\n      />\n    </>\n  );\n};\n\nexport default TasksPage;\n"],"names":["TextArea","Input","Option","Select","_ref","visible","onCancel","onSubmit","form","Form","useForm","_jsx","Modal","title","open","handleCancel","resetFields","onOk","async","values","validateFields","error","console","destroyOnClose","children","_jsxs","layout","initialValues","priority","dueDate","dayjs","Item","name","label","rules","required","message","placeholder","rows","autoSize","minRows","maxRows","Space","style","width","value","DatePicker","Title","Typography","onAddTask","_Fragment","marginBottom","level","margin","display","justifyContent","alignItems","Button","type","icon","PlusOutlined","onClick","tasks","onToggleCompletion","List","dataSource","renderItem","task","actions","Tag","color","high","medium","low","Meta","avatar","Checkbox","checked","completed","onChange","id","textDecoration","description","TasksPage","isModalVisible","setIsModalVisible","useState","setTasks","TaskHeader","Card","TaskList","taskId","map","TaskModal","Date","now","success"],"sourceRoot":""}